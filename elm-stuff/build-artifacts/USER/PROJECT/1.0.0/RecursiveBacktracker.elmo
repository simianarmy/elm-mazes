Elm.RecursiveBacktracker = Elm.RecursiveBacktracker || {};
Elm.RecursiveBacktracker.make = function (_elm) {
   "use strict";
   _elm.RecursiveBacktracker = _elm.RecursiveBacktracker || {};
   if (_elm.RecursiveBacktracker.values)
   return _elm.RecursiveBacktracker.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "RecursiveBacktracker",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $GridUtils = Elm.GridUtils.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Trampoline = Elm.Trampoline.make(_elm);
   var walkRandomly = F2(function (grid,
   stack) {
      return $List.isEmpty(stack) ? $Trampoline.Done(grid) : function () {
         var current = $Grid.toValidCell($List.head(stack));
         var neighbors = A3($Grid.filterNeighbors,
         function (c) {
            return $Basics.not($Cell.hasLinks(c));
         },
         grid,
         current);
         return $List.isEmpty(neighbors) ? $Trampoline.Continue(function (_v0) {
            return function () {
               switch (_v0.ctor)
               {case "_Tuple0":
                  return A2(walkRandomly,
                    grid,
                    A2($Maybe.withDefault,
                    _L.fromArray([]),
                    $List.tail(stack)));}
               _U.badCase($moduleName,
               "on line 34, column 37 to 88");
            }();
         }) : function () {
            var neighbor = $Grid.toValidCell(A2($GridUtils.sampleCell,
            neighbors,
            grid.rnd));
            var grid$ = A4($Grid.linkCells,
            grid,
            current,
            neighbor,
            true);
            var grid$$ = $Grid.updateRnd(grid$);
            return $Trampoline.Continue(function (_v2) {
               return function () {
                  switch (_v2.ctor)
                  {case "_Tuple0":
                     return A2(walkRandomly,
                       grid$$,
                       A2($List._op["::"],
                       neighbor,
                       stack));}
                  _U.badCase($moduleName,
                  "on line 41, column 36 to 74");
               }();
            });
         }();
      }();
   });
   var on = function (grid) {
      return function () {
         var $ = $Grid.randomCell(grid),
         grid$ = $._0,
         startCell = $._1;
         var stack = _L.fromArray([startCell]);
         return $Trampoline.trampoline(A2(walkRandomly,
         grid$,
         stack));
      }();
   };
   _elm.RecursiveBacktracker.values = {_op: _op
                                      ,on: on};
   return _elm.RecursiveBacktracker.values;
};