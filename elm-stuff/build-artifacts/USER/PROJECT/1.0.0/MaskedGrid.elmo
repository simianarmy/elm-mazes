Elm.MaskedGrid = Elm.MaskedGrid || {};
Elm.MaskedGrid.make = function (_elm) {
   "use strict";
   _elm.MaskedGrid = _elm.MaskedGrid || {};
   if (_elm.MaskedGrid.values)
   return _elm.MaskedGrid.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "MaskedGrid",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $List = Elm.List.make(_elm),
   $Mask = Elm.Mask.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var size = function (grid) {
      return $Mask.count(grid.mask);
   };
   var randomCell = function (grid) {
      return function () {
         var $ = A2($Mask.randomLocation,
         grid.mask,
         grid.rnd),
         row = $._0,
         col = $._1;
         return $Grid.toValidCell(A3($Grid.getCell,
         grid,
         row,
         col));
      }();
   };
   var prepareGrid = function (mask) {
      return function () {
         var createMaskedCell = F2(function (row,
         col) {
            return A3($Mask.get,
            mask,
            row,
            col) ? A2($Cell.createCell,
            row,
            col) : $Cell.createNilCell;
         });
         var makeRow = F2(function (cols,
         row) {
            return A2($List.map,
            createMaskedCell(row),
            _L.range(1,mask.cols));
         });
         return A2($List.concatMap,
         makeRow(mask.cols),
         _L.range(1,mask.rows));
      }();
   };
   var createMaskedGrid = F2(function (mask,
   initSeed) {
      return function () {
         var grid = A3($Grid.createGrid,
         mask.rows,
         mask.cols,
         initSeed);
         var grid$ = _U.replace([["cells"
                                 ,prepareGrid(mask)]],
         grid);
         return _U.insert("mask",
         mask,
         grid$);
      }();
   });
   var Masked = F2(function (a,b) {
      return _U.insert("mask",a,b);
   });
   _elm.MaskedGrid.values = {_op: _op
                            ,Masked: Masked
                            ,createMaskedGrid: createMaskedGrid
                            ,prepareGrid: prepareGrid
                            ,randomCell: randomCell
                            ,size: size};
   return _elm.MaskedGrid.values;
};