Elm.Mask = Elm.Mask || {};
Elm.Mask.make = function (_elm) {
   "use strict";
   _elm.Mask = _elm.Mask || {};
   if (_elm.Mask.values)
   return _elm.Mask.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Mask",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Rnd = Elm.Rnd.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var count = function (mask) {
      return function () {
         var addCols = function (rowbits) {
            return A2($Array.foldl,
            F2(function (x,y) {
               return x + y;
            }),
            0)(A2($Array.map,
            function (b) {
               return b ? 1 : 0;
            },
            rowbits));
         };
         return A2($Array.foldl,
         F2(function (x,y) {
            return x + y;
         }),
         0)(A2($Array.map,
         addCols,
         mask.bits));
      }();
   };
   var set = F4(function (mask,
   row,
   col,
   isOn) {
      return function () {
         var _v0 = A2($Array.get,
         row,
         mask.bits);
         switch (_v0.ctor)
         {case "Just":
            return _U.replace([["bits"
                               ,A3($Array.set,
                               row,
                               A3($Array.set,col,isOn,_v0._0),
                               mask.bits)]],
              mask);
            case "Nothing": return mask;}
         _U.badCase($moduleName,
         "between lines 36 and 41");
      }();
   });
   var get = F3(function (mask,
   row,
   col) {
      return function () {
         var _v2 = A2($Array.get,
         row,
         mask.bits);
         switch (_v2.ctor)
         {case "Just":
            return function () {
                 var _v4 = A2($Array.get,
                 col,
                 _v2._0);
                 switch (_v4.ctor)
                 {case "Just": return _v4._0;
                    case "Nothing": return false;}
                 _U.badCase($moduleName,
                 "between lines 29 and 32");
              }();
            case "Nothing": return false;}
         _U.badCase($moduleName,
         "between lines 27 and 32");
      }();
   });
   var randomLocation = F2(function (mask,
   rnd) {
      return A3(get,
      mask,
      rnd.row,
      rnd.col) ? {ctor: "_Tuple2"
                 ,_0: rnd.row
                 ,_1: rnd.col} : A2(randomLocation,
      mask,
      $Rnd.refresh(rnd));
   });
   var createMask = F2(function (rows,
   cols) {
      return function () {
         var bits = A2($Array.initialize,
         rows,
         function (n) {
            return A2($Array.repeat,
            cols,
            true);
         });
         return {_: {}
                ,bits: bits
                ,cols: cols
                ,rows: rows};
      }();
   });
   var Mask = F3(function (a,b,c) {
      return {_: {}
             ,bits: c
             ,cols: b
             ,rows: a};
   });
   _elm.Mask.values = {_op: _op
                      ,Mask: Mask
                      ,createMask: createMask
                      ,get: get
                      ,set: set
                      ,count: count
                      ,randomLocation: randomLocation};
   return _elm.Mask.values;
};