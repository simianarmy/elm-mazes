Elm.GridUtils = Elm.GridUtils || {};
Elm.GridUtils.make = function (_elm) {
   "use strict";
   _elm.GridUtils = _elm.GridUtils || {};
   if (_elm.GridUtils.values)
   return _elm.GridUtils.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "GridUtils",
   $Array = Elm.Array.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Rnd = Elm.Rnd.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var indexOfCell = F2(function (cell,
   cells) {
      return function () {
         var notFound = -1;
         var indexed = A2($List.indexedMap,
         F2(function (v0,v1) {
            return {ctor: "_Tuple2"
                   ,_0: v0
                   ,_1: v1};
         }),
         cells);
         var found = A2($List.filter,
         function (e) {
            return _U.eq($Basics.snd(e).id,
            cell.id);
         },
         indexed);
         return function () {
            var _v0 = $List.head(found);
            switch (_v0.ctor)
            {case "Just":
               return $Basics.fst(_v0._0);}
            return notFound;
         }();
      }();
   });
   var sampleCell = F2(function (sample,
   rnd) {
      return function () {
         var $ = A2($Random.generate,
         A2($Random.$int,
         0,
         $List.length(sample) - 1),
         rnd.seed),
         rand = $._0,
         seed = $._1;
         return A2($Array.get,
         rand,
         $Array.fromList(sample));
      }();
   });
   _elm.GridUtils.values = {_op: _op
                           ,sampleCell: sampleCell
                           ,indexOfCell: indexOfCell};
   return _elm.GridUtils.values;
};