Elm.Grid = Elm.Grid || {};
Elm.Grid.make = function (_elm) {
   "use strict";
   _elm.Grid = _elm.Grid || {};
   if (_elm.Grid.values)
   return _elm.Grid.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Grid",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Rnd = Elm.Rnd.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var RowAscii = F2(function (a,
   b) {
      return {_: {}
             ,bottom: b
             ,top: a};
   });
   var toTitle = function (grid) {
      return A2($Basics._op["++"],
      $Basics.toString(grid.rows),
      A2($Basics._op["++"],
      " X ",
      A2($Basics._op["++"],
      $Basics.toString(grid.cols),
      " Grid")));
   };
   var cellToList = function (cell) {
      return function () {
         switch (cell.ctor)
         {case "Just":
            return _L.fromArray([cell._0]);
            case "Nothing":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 183 and 185");
      }();
   };
   var cellIndex = F2(function (grid,
   cell) {
      return grid.cols * (cell.row - 1) + cell.col;
   });
   var size = function (grid) {
      return grid.rows * grid.cols;
   };
   var rowCells = F2(function (grid,
   row) {
      return A2($List.filter,
      function (c) {
         return _U.eq(c.row,row);
      },
      grid.cells);
   });
   var unlinkCells = F4(function (grid,
   cell,
   cellToUnlink,
   bidi) {
      return function () {
         var unlinkCell = F2(function (cell1,
         cell2) {
            return _U.replace([["links"
                               ,A2($Set.remove,
                               cell2.id,
                               cell1.links)]],
            cell1);
         });
         var unlinkMatched = function (c) {
            return _U.eq(c.id,
            cell.id) ? A2(unlinkCell,
            c,
            cellToUnlink) : bidi ? A2(unlinkCell,
            cellToUnlink,
            cell) : c;
         };
         return _U.replace([["cells"
                            ,A2($List.map,
                            unlinkMatched,
                            grid.cells)]],
         grid);
      }();
   });
   var linkCells = F4(function (grid,
   cell,
   cellToLink,
   bidi) {
      return function () {
         var linkCell = F2(function (cell1,
         cell2) {
            return _U.replace([["links"
                               ,A2($Set.insert,
                               cell2.id,
                               cell1.links)]],
            cell1);
         });
         var linkMatched = function (c) {
            return _U.eq(c.id,
            cell.id) ? A2(linkCell,
            c,
            cellToLink) : bidi && _U.eq(c.id,
            cellToLink.id) ? A2(linkCell,
            c,
            cell) : c;
         };
         return _U.replace([["cells"
                            ,A2($List.map,
                            linkMatched,
                            grid.cells)]],
         grid);
      }();
   });
   var isValidCell = function (cell) {
      return function () {
         switch (cell.ctor)
         {case "Just": return true;
            case "Nothing": return false;}
         _U.badCase($moduleName,
         "between lines 104 and 106");
      }();
   };
   var toValidCell = function (cell) {
      return function () {
         switch (cell.ctor)
         {case "Just": return cell._0;
            case "Nothing":
            return A2($Cell.createCell,
              -1,
              -1);}
         _U.badCase($moduleName,
         "between lines 98 and 100");
      }();
   };
   var getCell = F3(function (grid,
   row,
   col) {
      return _U.cmp(row,
      grid.rows) > 0 || (_U.cmp(col,
      grid.cols) > 0 || (_U.cmp(row,
      0) < 1 || _U.cmp(col,
      0) < 1)) ? $Maybe.Nothing : $List.head($List.reverse(A2($List.take,
      grid.cols * (row - 1) + col,
      grid.cells)));
   });
   var north = F2(function (grid,
   cell) {
      return A3(getCell,
      grid,
      cell.row - 1,
      cell.col);
   });
   var south = F2(function (grid,
   cell) {
      return A3(getCell,
      grid,
      cell.row + 1,
      cell.col);
   });
   var west = F2(function (grid,
   cell) {
      return A3(getCell,
      grid,
      cell.row,
      cell.col - 1);
   });
   var east = F2(function (grid,
   cell) {
      return A3(getCell,
      grid,
      cell.row,
      cell.col + 1);
   });
   var neighbors = F2(function (grid,
   cell) {
      return function () {
         var e = A2(east,grid,cell);
         var w = A2(west,grid,cell);
         var s = A2(south,grid,cell);
         var n = A2(north,grid,cell);
         return $List.concat(_L.fromArray([cellToList(n)
                                          ,cellToList(s)
                                          ,cellToList(w)
                                          ,cellToList(e)]));
      }();
   });
   var toAscii = function (grid) {
      return function () {
         var cellToString = F2(function (cell,
         ascii) {
            return function () {
               var curbottom = ascii.bottom;
               var curtop = ascii.top;
               var south_boundary = A2($Cell.isLinked,
               cell,
               toValidCell(A2(south,
               grid,
               cell))) ? "   " : "---";
               var east_boundary = A2($Cell.isLinked,
               cell,
               toValidCell(A2(east,
               grid,
               cell))) ? " " : "|";
               return _U.replace([["top"
                                  ,A2($Basics._op["++"],
                                  curtop,
                                  A2($Basics._op["++"],
                                  A2($String.repeat,3," "),
                                  east_boundary))]
                                 ,["bottom"
                                  ,A2($Basics._op["++"],
                                  curbottom,
                                  A2($Basics._op["++"],
                                  south_boundary,
                                  "+"))]],
               ascii);
            }();
         });
         var rowToStrings = function (row) {
            return function () {
               var rowascii = {_: {}
                              ,bottom: "+"
                              ,top: "|"};
               var finalascii = A3($List.foldl,
               cellToString,
               rowascii,
               A2(rowCells,grid,row));
               return A2($Basics._op["++"],
               finalascii.top,
               A2($Basics._op["++"],
               "\n",
               A2($Basics._op["++"],
               finalascii.bottom,
               "\n")));
            }();
         };
         return A2($Basics._op["++"],
         "+",
         A2($Basics._op["++"],
         A2($String.repeat,
         grid.cols,
         "---+"),
         A2($Basics._op["++"],
         "\n",
         $String.concat(A2($List.map,
         rowToStrings,
         _L.range(1,grid.rows))))));
      }();
   };
   var view = F2(function (grid,
   cellSize) {
      return function () {
         var maybeVisibleLine = F2(function (_v6,
         _v7) {
            return function () {
               switch (_v7.ctor)
               {case "_Tuple2":
                  return function () {
                       switch (_v6.ctor)
                       {case "_Tuple2":
                          return function () {
                               var style = _v7._0 ? _v6._0 : _v6._1;
                               return _L.fromArray([A2($Graphics$Collage.traced,
                               style,
                               _v7._1)]);
                            }();}
                       _U.badCase($moduleName,
                       "between lines 57 and 59");
                    }();}
               _U.badCase($moduleName,
               "between lines 57 and 59");
            }();
         });
         var cellWalls = F2(function (cell,
         style) {
            return function () {
               var invisibleStyle = _U.replace([["color"
                                                ,$Color.white]],
               style);
               var y2 = 0 - cellSize;
               var x2 = cellSize;
               var y1 = 0;
               var x1 = 0;
               return A2($List.concatMap,
               maybeVisibleLine({ctor: "_Tuple2"
                                ,_0: style
                                ,_1: invisibleStyle}),
               _L.fromArray([{ctor: "_Tuple2"
                             ,_0: isValidCell(A2(north,
                             grid,
                             cell))
                             ,_1: A2($Graphics$Collage.segment,
                             {ctor: "_Tuple2",_0: x1,_1: y1},
                             {ctor: "_Tuple2"
                             ,_0: x2
                             ,_1: y1})}
                            ,{ctor: "_Tuple2"
                             ,_0: isValidCell(A2(west,
                             grid,
                             cell))
                             ,_1: A2($Graphics$Collage.segment,
                             {ctor: "_Tuple2",_0: x1,_1: y1},
                             {ctor: "_Tuple2"
                             ,_0: x1
                             ,_1: y2})}
                            ,{ctor: "_Tuple2"
                             ,_0: A2($Cell.isLinked,
                             cell,
                             toValidCell(A2(east,grid,cell)))
                             ,_1: A2($Graphics$Collage.segment,
                             {ctor: "_Tuple2",_0: x2,_1: y1},
                             {ctor: "_Tuple2"
                             ,_0: x2
                             ,_1: y2})}
                            ,{ctor: "_Tuple2"
                             ,_0: A2($Cell.isLinked,
                             cell,
                             toValidCell(A2(south,
                             grid,
                             cell)))
                             ,_1: A2($Graphics$Collage.segment,
                             {ctor: "_Tuple2",_0: x1,_1: y2},
                             {ctor: "_Tuple2"
                             ,_0: x2
                             ,_1: y2})}]));
            }();
         });
         var paintCell = function (cell) {
            return function () {
               var style = _U.replace([["width"
                                       ,2]],
               $Graphics$Collage.defaultLine);
               var y1 = cell.row * cellSize * 1;
               var x1 = cell.col * cellSize * -1;
               return $Graphics$Collage.move({ctor: "_Tuple2"
                                             ,_0: $Basics.toFloat(x1)
                                             ,_1: $Basics.toFloat(y1)})($Graphics$Collage.group(A2(cellWalls,
               cell,
               style)));
            }();
         };
         var imgHeight = cellSize * grid.rows;
         var imgWidth = cellSize * grid.cols;
         return A3($Graphics$Collage.collage,
         imgWidth,
         imgHeight,
         A2($List.map,
         paintCell,
         grid.cells));
      }();
   });
   var updateRnd = function (grid) {
      return _U.replace([["rnd"
                         ,$Rnd.refresh(grid.rnd)]],
      grid);
   };
   var nextSeed = function (grid) {
      return $Rnd.refresh(grid.rnd).seed;
   };
   var createGrid = F3(function (rows,
   cols,
   initSeed) {
      return function () {
         var makeRow = F2(function (cols,
         row) {
            return A2($List.map,
            $Cell.createCell(row),
            _L.range(1,cols));
         });
         return {_: {}
                ,cells: A2($List.concatMap,
                makeRow(cols),
                _L.range(1,rows))
                ,cols: cols
                ,rnd: A3($Rnd.createGridRnd,
                rows,
                cols,
                initSeed)
                ,rows: rows};
      }();
   });
   var update = function (grid) {
      return A2(createGrid,
      grid.rows,
      grid.cols)(nextSeed(grid));
   };
   var Grid = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,cells: c
             ,cols: b
             ,rnd: d
             ,rows: a};
   });
   _elm.Grid.values = {_op: _op
                      ,Grid: Grid
                      ,createGrid: createGrid
                      ,nextSeed: nextSeed
                      ,updateRnd: updateRnd
                      ,update: update
                      ,view: view
                      ,getCell: getCell
                      ,toValidCell: toValidCell
                      ,isValidCell: isValidCell
                      ,north: north
                      ,south: south
                      ,west: west
                      ,east: east
                      ,neighbors: neighbors
                      ,linkCells: linkCells
                      ,unlinkCells: unlinkCells
                      ,rowCells: rowCells
                      ,size: size
                      ,cellIndex: cellIndex
                      ,cellToList: cellToList
                      ,toTitle: toTitle
                      ,RowAscii: RowAscii
                      ,toAscii: toAscii};
   return _elm.Grid.values;
};