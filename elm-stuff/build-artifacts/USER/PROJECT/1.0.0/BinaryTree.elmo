Elm.BinaryTree = Elm.BinaryTree || {};
Elm.BinaryTree.make = function (_elm) {
   "use strict";
   _elm.BinaryTree = _elm.BinaryTree || {};
   if (_elm.BinaryTree.values)
   return _elm.BinaryTree.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "BinaryTree",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $GridUtils = Elm.GridUtils.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var on = function (grid) {
      return function () {
         var getRandomNeighbor = F2(function (grid$,
         cell) {
            return function () {
               var northandeast = $List.concat(_L.fromArray([$Grid.cellToList(A2($Grid.north,
                                                            grid$,
                                                            cell))
                                                            ,$Grid.cellToList(A2($Grid.east,
                                                            grid$,
                                                            cell))]));
               return $List.isEmpty(northandeast) ? $Maybe.Nothing : A2($GridUtils.sampleCell,
               northandeast,
               grid$.rnd);
            }();
         });
         var processCell = F2(function (cell,
         grid) {
            return function () {
               var grid$ = $Grid.updateRnd(grid);
               var neighbor = A2(getRandomNeighbor,
               grid,
               cell);
               return function () {
                  switch (neighbor.ctor)
                  {case "Just":
                     return A4($Grid.linkCells,
                       grid$,
                       cell,
                       neighbor._0,
                       true);
                     case "Nothing": return grid$;}
                  _U.badCase($moduleName,
                  "between lines 30 and 33");
               }();
            }();
         });
         return A3($List.foldl,
         processCell,
         grid,
         grid.cells);
      }();
   };
   _elm.BinaryTree.values = {_op: _op
                            ,on: on};
   return _elm.BinaryTree.values;
};