Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Maze = Elm.Maze.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var startTime = Elm.Native.Port.make(_elm).inbound("startTime",
   "Float",
   function (v) {
      return typeof v === "number" ? v : _U.badPort("a number",
      v);
   });
   var startTimeSeed = $Random.initialSeed($Basics.round(startTime));
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Refresh":
            return $Maze.update(model);
            case "UpdateHeight":
            return A3($Maze.updateSize,
              model,
              model.grid.rows,
              $Maybe.withDefault(model.grid.cols)($Result.toMaybe($String.toInt(action._0))));
            case "UpdateWidth":
            return A3($Maze.updateSize,
              model,
              $Maybe.withDefault(model.grid.rows)($Result.toMaybe($String.toInt(action._0))),
              model.grid.cols);}
         _U.badCase($moduleName,
         "between lines 28 and 39");
      }();
   });
   var UpdateHeight = function (a) {
      return {ctor: "UpdateHeight"
             ,_0: a};
   };
   var UpdateWidth = function (a) {
      return {ctor: "UpdateWidth"
             ,_0: a};
   };
   var Refresh = {ctor: "Refresh"};
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([$Maze.view(model)
                   ,A2($Html.input,
                   _L.fromArray([$Html$Attributes.value($Basics.toString(model.grid.rows))
                                ,A3($Html$Events.on,
                                "input",
                                $Html$Events.targetValue,
                                function ($) {
                                   return $Signal.message(address)(UpdateWidth($));
                                })]),
                   _L.fromArray([]))
                   ,$Html.text(" X ")
                   ,A2($Html.input,
                   _L.fromArray([$Html$Attributes.value($Basics.toString(model.grid.cols))
                                ,A3($Html$Events.on,
                                "input",
                                $Html$Events.targetValue,
                                function ($) {
                                   return $Signal.message(address)(UpdateHeight($));
                                })]),
                   _L.fromArray([]))
                   ,A2($Html.button,
                   _L.fromArray([A2($Html$Events.onClick,
                   address,
                   Refresh)]),
                   _L.fromArray([$Html.text("REFRESH")]))]));
   });
   var initAlg = $Maze.sidewinder;
   var initHeight = 10;
   var initWidth = 10;
   var main = $StartApp$Simple.start({_: {}
                                     ,model: A4($Maze.init,
                                     initAlg,
                                     initWidth,
                                     initHeight,
                                     startTimeSeed)
                                     ,update: update
                                     ,view: view});
   _elm.Main.values = {_op: _op
                      ,initWidth: initWidth
                      ,initHeight: initHeight
                      ,initAlg: initAlg
                      ,Refresh: Refresh
                      ,UpdateWidth: UpdateWidth
                      ,UpdateHeight: UpdateHeight
                      ,update: update
                      ,view: view
                      ,startTimeSeed: startTimeSeed
                      ,main: main};
   return _elm.Main.values;
};