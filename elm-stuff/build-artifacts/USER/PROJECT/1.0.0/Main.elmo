Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $ElmTest$Assertion = Elm.ElmTest.Assertion.make(_elm),
   $ElmTest$Runner$Element = Elm.ElmTest.Runner.Element.make(_elm),
   $ElmTest$Test = Elm.ElmTest.Test.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $List = Elm.List.make(_elm),
   $Mask = Elm.Mask.make(_elm),
   $MaskedGrid = Elm.MaskedGrid.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Sidewinder = Elm.Sidewinder.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var createGrid = F2(function (rows,
   cols) {
      return A2($MaskedGrid.createMaskedGrid,
      A2($Mask.createMask,rows,cols),
      $Random.initialSeed(123));
   });
   var gridTests = A2($ElmTest$Test.suite,
   "Masked grid test suite",
   _L.fromArray([A2($ElmTest$Test.test,
                "Masked Grid size equals grid size",
                function () {
                   var grid = A2(createGrid,
                   3,
                   3);
                   return A2($ElmTest$Assertion.assertEqual,
                   $MaskedGrid.size(grid),
                   9);
                }())
                ,A2($ElmTest$Test.test,
                "Can be used with maze algorithms",
                function () {
                   var grid = A2(createGrid,
                   3,
                   3);
                   return $ElmTest$Assertion.assert($Basics.not(_U.eq($Grid.size($Sidewinder.on(grid)),
                   9)));
                }())]));
   var main = $ElmTest$Runner$Element.runDisplay(gridTests);
   _elm.Main.values = {_op: _op
                      ,createGrid: createGrid
                      ,gridTests: gridTests
                      ,main: main};
   return _elm.Main.values;
};