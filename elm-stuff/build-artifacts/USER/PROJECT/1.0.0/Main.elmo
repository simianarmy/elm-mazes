Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $BinaryTree = Elm.BinaryTree.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Sidewinder = Elm.Sidewinder.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm);
   var startTime = Elm.Native.Port.make(_elm).inbound("startTime",
   "Float",
   function (v) {
      return typeof v === "number" ? v : _U.badPort("a number",
      v);
   });
   var startTimeSeed = $Random.initialSeed($Basics.round(startTime));
   var Refresh = {ctor: "Refresh"};
   var view = F2(function (address,
   model) {
      return A2($Html.div,
      _L.fromArray([]),
      _L.fromArray([$Html.text($Grid.toTitle(model))
                   ,A2($Html.pre,
                   _L.fromArray([]),
                   _L.fromArray([$Html.text($Grid.gridToString(model))]))
                   ,A2($Html.button,
                   _L.fromArray([A2($Html$Events.onClick,
                   address,
                   Refresh)]),
                   _L.fromArray([$Html.text("REFRESH")]))]));
   });
   var init = F2(function (alg,
   seed) {
      return alg(A3($Grid.createGrid,
      20,
      20,
      seed));
   });
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Refresh": return A2(init,
              $BinaryTree.on,
              $Grid.nextSeed(model));}
         _U.badCase($moduleName,
         "between lines 28 and 29");
      }();
   });
   var main = $StartApp$Simple.start({_: {}
                                     ,model: A2(init,
                                     $Sidewinder.on,
                                     startTimeSeed)
                                     ,update: update
                                     ,view: view});
   _elm.Main.values = {_op: _op
                      ,init: init
                      ,Refresh: Refresh
                      ,update: update
                      ,view: view
                      ,startTimeSeed: startTimeSeed
                      ,main: main};
   return _elm.Main.values;
};