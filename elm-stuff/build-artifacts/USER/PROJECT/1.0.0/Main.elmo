Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $ElmTest$Assertion = Elm.ElmTest.Assertion.make(_elm),
   $ElmTest$Runner$Element = Elm.ElmTest.Runner.Element.make(_elm),
   $ElmTest$Test = Elm.ElmTest.Test.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Sidewinder = Elm.Sidewinder.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var sidewinderTests = A2($ElmTest$Test.suite,
   "Sidewinder Algorithm test suite",
   _L.fromArray([A2($ElmTest$Test.test,
                "Grid cells are of equal length",
                function () {
                   var seed = $Random.initialSeed(123123);
                   var grid = A3($Grid.createGrid,
                   3,
                   3,
                   seed);
                   return A2($ElmTest$Assertion.assertEqual,
                   $List.length(grid.cells),
                   $List.length($Sidewinder.on(grid).cells));
                }())
                ,A2($ElmTest$Test.test,
                "Cell links are created",
                function () {
                   var grid = $Sidewinder.on(A3($Grid.createGrid,
                   3,
                   3,
                   $Random.initialSeed(123123)));
                   return A2($ElmTest$Assertion.assertEqual,
                   $List.isEmpty(A2($List.filter,
                   function (a) {
                      return $Basics.not($Set.isEmpty($Cell.linked(a)));
                   },
                   grid.cells)),
                   false);
                }())
                ,A2($ElmTest$Test.test,
                "Cell top row eastern links exist",
                function () {
                   var grid = $Sidewinder.on(A3($Grid.createGrid,
                   3,
                   3,
                   $Random.initialSeed(123)));
                   return $ElmTest$Assertion.assert(A2($Set.member,
                   "1:2",
                   $Grid.toValidCell(A3($Grid.getCell,
                   grid,
                   1,
                   1)).links) && A2($Set.member,
                   "1:3",
                   $Grid.toValidCell(A3($Grid.getCell,
                   grid,
                   1,
                   2)).links));
                }())
                ,A2($ElmTest$Test.test,
                "Cell east row north/south links exist",
                function () {
                   var grid = $Sidewinder.on(A3($Grid.createGrid,
                   3,
                   3,
                   $Random.initialSeed(123)));
                   return $ElmTest$Assertion.assert(A2($Set.member,
                   "1:3",
                   $Grid.toValidCell(A3($Grid.getCell,
                   grid,
                   2,
                   3)).links) && A2($Set.member,
                   "2:3",
                   $Grid.toValidCell(A3($Grid.getCell,
                   grid,
                   3,
                   3)).links));
                }())]));
   var main = $ElmTest$Runner$Element.runDisplay(sidewinderTests);
   _elm.Main.values = {_op: _op
                      ,sidewinderTests: sidewinderTests
                      ,main: main};
   return _elm.Main.values;
};