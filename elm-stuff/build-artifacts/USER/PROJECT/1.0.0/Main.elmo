Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Maze = Elm.Maze.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm),
   $String = Elm.String.make(_elm);
   var startTime = Elm.Native.Port.make(_elm).inbound("startTime",
   "Float",
   function (v) {
      return typeof v === "number" ? v : _U.badPort("a number",
      v);
   });
   var startTimeSeed = $Random.initialSeed($Basics.round(startTime));
   var displayFromString = function (str) {
      return _U.eq(str,
      "Ascii") ? $Maze.Ascii : $Maze.Colored;
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "Refresh":
            return $Maze.update(model);
            case "SelectAlg":
            return $Maze.update(_U.replace([["alg"
                                            ,$Maze.algByName(action._0)]],
              model));
            case "SelectView":
            return _U.replace([["display"
                               ,action._0]],
              model);
            case "UpdateHeight":
            return A3($Maze.updateSize,
              model,
              model.grid.cols,
              $Maybe.withDefault(model.grid.rows)($Result.toMaybe($String.toInt(action._0))));
            case "UpdateWidth":
            return A3($Maze.updateSize,
              model,
              $Maybe.withDefault(model.grid.cols)($Result.toMaybe($String.toInt(action._0))),
              model.grid.rows);}
         _U.badCase($moduleName,
         "between lines 32 and 51");
      }();
   });
   var SelectView = function (a) {
      return {ctor: "SelectView"
             ,_0: a};
   };
   var SelectAlg = function (a) {
      return {ctor: "SelectAlg"
             ,_0: a};
   };
   var UpdateHeight = function (a) {
      return {ctor: "UpdateHeight"
             ,_0: a};
   };
   var UpdateWidth = function (a) {
      return {ctor: "UpdateWidth"
             ,_0: a};
   };
   var Refresh = {ctor: "Refresh"};
   var view = F2(function (address,
   model) {
      return function () {
         var viewOptions = _L.fromArray([A2($Html.option,
                                        _L.fromArray([$Html$Attributes.selected(true)]),
                                        _L.fromArray([$Html.text("Ascii")]))
                                        ,A2($Html.option,
                                        _L.fromArray([]),
                                        _L.fromArray([$Html.text("Colored")]))]);
         var algToOptions = function (attr) {
            return A2($Html.option,
            _L.fromArray([$Html$Attributes.selected(_U.eq(attr.alg,
            $Maze.defaultAlgorithm))]),
            _L.fromArray([$Html.text(attr.name)]));
         };
         var selectView = A3($Html$Events.on,
         "change",
         $Html$Events.targetValue,
         function (val) {
            return $Signal.message(address)(SelectView(displayFromString(val)));
         });
         var selectAlg = A3($Html$Events.on,
         "change",
         $Html$Events.targetValue,
         function (val) {
            return $Signal.message(address)(SelectAlg(val));
         });
         return A2($Html.div,
         _L.fromArray([]),
         _L.fromArray([A2($Html.header,
                      _L.fromArray([]),
                      _L.fromArray([A2($Html.h1,
                      _L.fromArray([]),
                      _L.fromArray([$Html.text("Amazeball Mazes")]))]))
                      ,$Maze.view(model)
                      ,A2($Html.br,
                      _L.fromArray([]),
                      _L.fromArray([]))
                      ,A2($Html.input,
                      _L.fromArray([$Html$Attributes.$class("sizeInput")
                                   ,$Html$Attributes.value($Basics.toString(model.grid.cols))
                                   ,A3($Html$Events.on,
                                   "input",
                                   $Html$Events.targetValue,
                                   function ($) {
                                      return $Signal.message(address)(UpdateWidth($));
                                   })]),
                      _L.fromArray([]))
                      ,$Html.text(" X ")
                      ,A2($Html.input,
                      _L.fromArray([$Html$Attributes.$class("sizeInput")
                                   ,$Html$Attributes.value($Basics.toString(model.grid.rows))
                                   ,A3($Html$Events.on,
                                   "input",
                                   $Html$Events.targetValue,
                                   function ($) {
                                      return $Signal.message(address)(UpdateHeight($));
                                   })]),
                      _L.fromArray([]))
                      ,A2($Html.br,
                      _L.fromArray([]),
                      _L.fromArray([]))
                      ,A2($Html.select,
                      _L.fromArray([selectAlg]),
                      A2($List.map,
                      algToOptions,
                      $Maze.algorithms))
                      ,A2($Html.select,
                      _L.fromArray([selectView]),
                      viewOptions)
                      ,A2($Html.button,
                      _L.fromArray([A2($Html$Events.onClick,
                      address,
                      Refresh)]),
                      _L.fromArray([$Html.text("REFRESH")]))
                      ,A2($Html.footer,
                      _L.fromArray([]),
                      _L.fromArray([]))]));
      }();
   });
   var initDisplay = $Maze.Ascii;
   var initHeight = 10;
   var initWidth = 10;
   var main = $StartApp$Simple.start({_: {}
                                     ,model: A5($Maze.init,
                                     $Maze.defaultAlgorithm,
                                     initWidth,
                                     initHeight,
                                     startTimeSeed,
                                     initDisplay)
                                     ,update: update
                                     ,view: view});
   _elm.Main.values = {_op: _op
                      ,initWidth: initWidth
                      ,initHeight: initHeight
                      ,initDisplay: initDisplay
                      ,Refresh: Refresh
                      ,UpdateWidth: UpdateWidth
                      ,UpdateHeight: UpdateHeight
                      ,SelectAlg: SelectAlg
                      ,SelectView: SelectView
                      ,update: update
                      ,view: view
                      ,displayFromString: displayFromString
                      ,startTimeSeed: startTimeSeed
                      ,main: main};
   return _elm.Main.values;
};