Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $ElmTest$Assertion = Elm.ElmTest.Assertion.make(_elm),
   $ElmTest$Runner$Element = Elm.ElmTest.Runner.Element.make(_elm),
   $ElmTest$Test = Elm.ElmTest.Test.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var unmaybeCell = function (cell) {
      return $Maybe.withDefault("")($Maybe.map($Cell.cellToString)(cell));
   };
   var gridTests = A2($ElmTest$Test.suite,
   "Grid test suite",
   _L.fromArray([A2($ElmTest$Test.test,
                "Grid creator",
                A2($ElmTest$Assertion.assertEqual,
                $List.length(A2($Grid.createGrid,
                2,
                2).cells),
                4))
                ,A2($ElmTest$Test.test,
                "Cell accessor",
                A2($ElmTest$Assertion.assertEqual,
                unmaybeCell(A3($Grid.getCell,
                A2($Grid.createGrid,2,2),
                1,
                2)),
                "(1, 2)"))
                ,A2($ElmTest$Test.test,
                "Cell accessor2",
                A2($ElmTest$Assertion.assertEqual,
                unmaybeCell(A3($Grid.getCell,
                A2($Grid.createGrid,2,3),
                1,
                2)),
                "(1, 2)"))
                ,A2($ElmTest$Test.test,
                "Cell accessor3",
                A2($ElmTest$Assertion.assertEqual,
                unmaybeCell(A3($Grid.getCell,
                A2($Grid.createGrid,2,3),
                2,
                1)),
                "(2, 1)"))
                ,A2($ElmTest$Test.test,
                "Cell accessor out of bounds",
                A2($ElmTest$Assertion.assertEqual,
                unmaybeCell(A3($Grid.getCell,
                A2($Grid.createGrid,2,3),
                3,
                4)),
                ""))
                ,A2($ElmTest$Test.test,
                "Cell accessor out of bounds2",
                A2($ElmTest$Assertion.assertEqual,
                unmaybeCell(A3($Grid.getCell,
                A2($Grid.createGrid,2,3),
                0,
                4)),
                ""))
                ,A2($ElmTest$Test.test,
                "Neighbors returns list of neighboring cells (middle of 3x3 grid)",
                function () {
                   var grid = A2($Grid.createGrid,
                   3,
                   3);
                   return A2($ElmTest$Assertion.assertEqual,
                   $List.length(A2($Grid.neighbors,
                   grid,
                   A2($Cell.createCell,2,2))),
                   4);
                }())
                ,A2($ElmTest$Test.test,
                "Neighbors returns list of neighboring cells (corner of 3x3 grid)",
                function () {
                   var grid = A2($Grid.createGrid,
                   3,
                   3);
                   return A2($ElmTest$Assertion.assertEqual,
                   $List.length(A2($Grid.neighbors,
                   grid,
                   A2($Cell.createCell,1,1))),
                   2);
                }())
                ,A2($ElmTest$Test.test,
                "Neighbors returns list of neighboring cells (corner 2x2 grid)",
                function () {
                   var grid = A2($Grid.createGrid,
                   2,
                   2);
                   return A2($ElmTest$Assertion.assertEqual,
                   $List.length(A2($Grid.neighbors,
                   grid,
                   A2($Cell.createCell,1,1))),
                   2);
                }())
                ,A2($ElmTest$Test.test,
                "Neighbors returns list of neighboring cells (corner 1x2 grid)",
                function () {
                   var grid = A2($Grid.createGrid,
                   1,
                   2);
                   return A2($ElmTest$Assertion.assertEqual,
                   $List.length(A2($Grid.neighbors,
                   grid,
                   A2($Cell.createCell,1,1))),
                   1);
                }())
                ,A2($ElmTest$Test.test,
                "Neighbors returns list of neighboring cells (corner 1x1 grid)",
                function () {
                   var grid = A2($Grid.createGrid,
                   1,
                   1);
                   return A2($ElmTest$Assertion.assertEqual,
                   $List.length(A2($Grid.neighbors,
                   grid,
                   A2($Cell.createCell,1,1))),
                   0);
                }())
                ,A2($ElmTest$Test.test,
                "Grid size",
                A2($ElmTest$Assertion.assertEqual,
                $Grid.size(A2($Grid.createGrid,
                3,
                5)),
                15))]));
   var main = $ElmTest$Runner$Element.runDisplay(gridTests);
   _elm.Main.values = {_op: _op
                      ,unmaybeCell: unmaybeCell
                      ,gridTests: gridTests
                      ,main: main};
   return _elm.Main.values;
};