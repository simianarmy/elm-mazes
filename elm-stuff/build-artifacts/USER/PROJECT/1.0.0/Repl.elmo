Elm.Repl = Elm.Repl || {};
Elm.Repl.make = function (_elm) {
   "use strict";
   _elm.Repl = _elm.Repl || {};
   if (_elm.Repl.values)
   return _elm.Repl.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Repl",
   $Basics = Elm.Basics.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $List = Elm.List.make(_elm),
   $Mask = Elm.Mask.make(_elm),
   $MaskedGrid = Elm.MaskedGrid.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Sidewinder = Elm.Sidewinder.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var tsol = {ctor: "_Tuple0"};
   var mask = A2($Mask.createMask,
   3,
   3);
   var mask$ = A4($Mask.set,
   mask,
   0,
   0,
   false);
   var mask$$ = A4($Mask.set,
   mask$,
   2,
   2,
   false);
   var mask$$$ = A4($Mask.set,
   mask$$,
   4,
   4,
   false);
   var grid = A2($MaskedGrid.createMaskedGrid,
   mask,
   $Random.initialSeed(123));
   var maze = $Sidewinder.on(grid);
   var deltron3030 = A2($Grid.toAscii,
   $Grid.cellToAscii,
   _U.remove("mask",maze));
   _elm.Repl.values = {_op: _op
                      ,deltron3030: deltron3030
                      ,grid: grid
                      ,mask: mask
                      ,mask$: mask$
                      ,mask$$: mask$$
                      ,mask$$$: mask$$$
                      ,maze: maze
                      ,tsol: tsol};
   return _elm.Repl.values;
};