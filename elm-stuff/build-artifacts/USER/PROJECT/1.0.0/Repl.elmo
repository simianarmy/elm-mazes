Elm.Repl = Elm.Repl || {};
Elm.Repl.make = function (_elm) {
   "use strict";
   _elm.Repl = _elm.Repl || {};
   if (_elm.Repl.values)
   return _elm.Repl.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Repl",
   $Basics = Elm.Basics.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $GridUtils = Elm.GridUtils.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var tsol = {ctor: "_Tuple0"};
   var grid = A3($Grid.createGrid,
   5,
   5,
   $Random.initialSeed(123));
   var foo = $Grid.randomCell(grid);
   var foo2 = $Grid.randomCell($Basics.fst(foo));
   var foo3 = $Grid.randomCell($Basics.fst(foo2));
   var c2 = $Basics.snd(foo2);
   var c1 = $Basics.snd(foo);
   var first = c1;
   var unvisited = A2($List.filter,
   function (e) {
      return $Basics.not(_U.eq(e.id,
      first.id));
   },
   grid.cells);
   var deltron3030 = A2($GridUtils.sampleCell,
   unvisited,
   grid.rnd);
   var rwp = {_: {}
             ,cell: c1
             ,grid: grid
             ,path: _L.fromArray([c1])
             ,unvisited: unvisited};
   _elm.Repl.values = {_op: _op
                      ,c1: c1
                      ,c2: c2
                      ,deltron3030: deltron3030
                      ,first: first
                      ,foo: foo
                      ,foo2: foo2
                      ,foo3: foo3
                      ,grid: grid
                      ,rwp: rwp
                      ,tsol: tsol
                      ,unvisited: unvisited};
   return _elm.Repl.values;
};