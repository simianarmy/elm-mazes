Elm.DistanceGrid = Elm.DistanceGrid || {};
Elm.DistanceGrid.make = function (_elm) {
   "use strict";
   _elm.DistanceGrid = _elm.DistanceGrid || {};
   if (_elm.DistanceGrid.values)
   return _elm.DistanceGrid.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "DistanceGrid",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $Dijkstra = Elm.Dijkstra.make(_elm),
   $Distances = Elm.Distances.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $IntToBaseX = Elm.IntToBaseX.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var cellToAscii = F2(function (dgrid,
   cell) {
      return function () {
         var dist = A2($Distances.lookup,
         dgrid.dists,
         cell);
         return _U.eq(dist,
         -1) ? A2($Grid.cellToAscii,
         dgrid,
         cell) : A2($IntToBaseX.toBaseX,
         dist,
         36);
      }();
   });
   var viewDistances = function (dgrid) {
      return A2($Grid.toAscii,
      cellToAscii,
      dgrid);
   };
   var distances = F2(function (grid,
   root) {
      return A2($Dijkstra.cellDistances,
      grid,
      root);
   });
   var createDistanceGrid = F2(function (grid,
   root) {
      return _U.insert("dists",
      A2(distances,grid,root),
      grid);
   });
   var pathTo = F3(function (grid,
   root,
   goal) {
      return function () {
         var current = goal;
         var dgrid = A2(createDistanceGrid,
         grid,
         root);
         var breadcrumbs = A3($Distances.add,
         $Distances.init(root),
         current,
         A2($Distances.lookup,
         dgrid.dists,
         current));
         var walkPath = F2(function (breadcrumbs$,
         current$) {
            return _U.eq(current$.id,
            root.id) ? breadcrumbs$ : function () {
               var currentDistance = A2($Distances.lookup,
               dgrid.dists,
               current$);
               var links = A2($Grid.linkedCells,
               grid,
               current$);
               var res = A2($List.filter,
               function (neighbor) {
                  return _U.cmp(A2($Distances.lookup,
                  dgrid.dists,
                  neighbor),
                  currentDistance) < 0;
               },
               links);
               return $List.isEmpty(res) ? breadcrumbs$ : function () {
                  var neighbor = $Grid.toValidCell($List.head(res));
                  var breadcrumbs$$ = A3($Distances.add,
                  breadcrumbs$,
                  neighbor,
                  A2($Distances.lookup,
                  dgrid.dists,
                  neighbor));
                  return A2(walkPath,
                  breadcrumbs$$,
                  neighbor);
               }();
            }();
         });
         return A2(walkPath,
         breadcrumbs,
         current);
      }();
   });
   var longestPath = F2(function (grid,
   root) {
      return function () {
         var dgrid = A2(createDistanceGrid,
         grid,
         root);
         var $ = $Distances.max(dgrid.dists),
         cellId = $._0,
         foo = $._1;
         var newStartCell = A2($Grid.cellIdToCell,
         grid,
         cellId);
         var dgrid$ = A2(createDistanceGrid,
         grid,
         newStartCell);
         var $ = $Distances.max(dgrid$.dists),
         goalId = $._0,
         foo$ = $._1;
         var goal = A2($Grid.cellIdToCell,
         grid,
         goalId);
         return A3(pathTo,
         grid,
         newStartCell,
         goal);
      }();
   });
   var CellDistances = F2(function (a,
   b) {
      return _U.insert("dists",
      a,
      b);
   });
   _elm.DistanceGrid.values = {_op: _op
                              ,CellDistances: CellDistances
                              ,createDistanceGrid: createDistanceGrid
                              ,distances: distances
                              ,cellToAscii: cellToAscii
                              ,viewDistances: viewDistances
                              ,pathTo: pathTo
                              ,longestPath: longestPath};
   return _elm.DistanceGrid.values;
};