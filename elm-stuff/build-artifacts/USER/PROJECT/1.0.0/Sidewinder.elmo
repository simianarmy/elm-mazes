Elm.Sidewinder = Elm.Sidewinder || {};
Elm.Sidewinder.make = function (_elm) {
   "use strict";
   _elm.Sidewinder = _elm.Sidewinder || {};
   if (_elm.Sidewinder.values)
   return _elm.Sidewinder.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Sidewinder",
   $Basics = Elm.Basics.make(_elm),
   $Cell = Elm.Cell.make(_elm),
   $Grid = Elm.Grid.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var on = function (grid) {
      return function () {
         var processCell = F2(function (cell,
         rowState) {
            return function () {
               var grid$ = $Grid.updateRnd(rowState.grid);
               var atNorthernBoundary = $Basics.not($Grid.isValidCell(A2($Grid.north,
               rowState.grid,
               cell)));
               var atEasternBoundary = $Basics.not($Grid.isValidCell(A2($Grid.east,
               rowState.grid,
               cell)));
               var shouldCloseOut = atEasternBoundary || $Basics.not(atNorthernBoundary) && grid$.rnd.heads;
               return shouldCloseOut ? function () {
                  var grid$$ = $Grid.updateRnd(grid$);
                  var rand = $Basics.fst(A2($Random.generate,
                  A2($Random.$int,
                  1,
                  $List.length(rowState.run)),
                  grid$.rnd.seed));
                  var member = $Grid.toValidCell($List.head($List.reverse(A2($List.take,
                  rand,
                  rowState.run))));
                  var northern = A2($Grid.north,
                  grid$,
                  member);
                  return $Grid.isValidCell(northern) ? {_: {}
                                                       ,grid: A4($Grid.linkCells,
                                                       grid$$,
                                                       member,
                                                       $Grid.toValidCell(northern),
                                                       true)
                                                       ,run: _L.fromArray([])} : {_: {}
                                                                                 ,grid: grid$$
                                                                                 ,run: _L.fromArray([])};
               }() : _U.replace([["grid"
                                 ,A4($Grid.linkCells,
                                 grid$,
                                 cell,
                                 $Grid.toValidCell(A2($Grid.east,
                                 grid$,
                                 cell)),
                                 true)]],
               rowState);
            }();
         });
         var processRow = F2(function (row,
         curGrid) {
            return function () {
               var state = {_: {}
                           ,grid: curGrid
                           ,run: _L.fromArray([])};
               var result = A3($List.foldl,
               processCell,
               state,
               A2($Grid.rowCells,grid,row));
               return result.grid;
            }();
         });
         var bottomLeftToTopRightCells = A2($List.concatMap,
         $Grid.rowCells(grid),
         $List.reverse(_L.range(1,
         grid.rows)));
         var headsOrTails = $Random.generate(A2($Random.$int,
         1,
         2));
         return A3($List.foldl,
         processRow,
         grid,
         $List.reverse(_L.range(1,
         grid.rows)));
      }();
   };
   var RowState = F2(function (a,
   b) {
      return {_: {}
             ,grid: b
             ,run: a};
   });
   _elm.Sidewinder.values = {_op: _op
                            ,RowState: RowState
                            ,on: on};
   return _elm.Sidewinder.values;
};