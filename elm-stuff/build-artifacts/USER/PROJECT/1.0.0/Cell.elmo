Elm.Cell = Elm.Cell || {};
Elm.Cell.make = function (_elm) {
   "use strict";
   _elm.Cell = _elm.Cell || {};
   if (_elm.Cell.values)
   return _elm.Cell.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Cell",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var cellToString = function (cell) {
      return A2($Basics._op["++"],
      "(",
      A2($Basics._op["++"],
      $Basics.toString(cell.row),
      A2($Basics._op["++"],
      ", ",
      A2($Basics._op["++"],
      $Basics.toString(cell.col),
      ")"))));
   };
   var hasLinks = function (cell) {
      return $Basics.not($Set.isEmpty(cell.links));
   };
   var isLinked = F2(function (cell1,
   cell2) {
      return A2($Set.member,
      cell2.id,
      cell1.links);
   });
   var isMasked = function (cell) {
      return function () {
         switch (cell.ctor)
         {case "Just":
            return cell._0.masked;
            case "Nothing": return true;}
         _U.badCase($moduleName,
         "between lines 47 and 49");
      }();
   };
   var linked = function (cell) {
      return cell.links;
   };
   var createCellID = F2(function (a,
   b) {
      return {ctor: "_Tuple2"
             ,_0: a
             ,_1: b};
   });
   var createCell = F2(function (row,
   col) {
      return {_: {}
             ,col: col
             ,id: A2(createCellID,row,col)
             ,links: $Set.empty
             ,masked: false
             ,row: row};
   });
   var createMaskedCell = F2(function (row,
   col) {
      return function () {
         var cell = A2(createCell,
         row,
         col);
         return _U.replace([["masked"
                            ,true]],
         cell);
      }();
   });
   var Cell = F5(function (a,
   b,
   c,
   d,
   e) {
      return {_: {}
             ,col: c
             ,id: a
             ,links: e
             ,masked: d
             ,row: b};
   });
   _elm.Cell.values = {_op: _op
                      ,Cell: Cell
                      ,createCell: createCell
                      ,createMaskedCell: createMaskedCell
                      ,createCellID: createCellID
                      ,linked: linked
                      ,isMasked: isMasked
                      ,isLinked: isLinked
                      ,hasLinks: hasLinks
                      ,cellToString: cellToString};
   return _elm.Cell.values;
};